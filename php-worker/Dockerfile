#--------------------------------------------------------------------------
# Image Setup
#--------------------------------------------------------------------------
#

ARG LARADOCK_PHP_VERSION
FROM php:${LARADOCK_PHP_VERSION}-alpine

LABEL maintainer="<evan886@gmail.com>"

ARG LARADOCK_PHP_VERSION

# If you're in China, or you need to change sources, will be set CHANGE_SOURCE to true in .env.

#ARG CHANGE_SOURCE=false
#ARG CHANGE_SOURCE=true
#RUN if [ ${CHANGE_SOURCE} = true ]; then \
    # Change application source from dl-cdn.alpinelinux.org to aliyun source
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories 
#;fi

RUN apk --update add wget \
  curl \
  git \
  build-base \
  libmemcached-dev \
  libmcrypt-dev \
  libxml2-dev \
  pcre-dev \
  zlib-dev \
  autoconf \
  cyrus-sasl-dev \
  libgsasl-dev \
  oniguruma-dev \
  php7-opcache \
  shadow \
  php7-exif  \
  icu-dev  \
  php7-intl  \
  openldap-dev \
  imagemagick \
  imagemagick-dev \
  supervisor

RUN     docker-php-ext-install  exif
RUN     docker-php-ext-install  intl
RUN     docker-php-ext-install  ldap
RUN  pecl install imagick \
    && docker-php-ext-enable imagick

RUN docker-php-ext-install mysqli mbstring pdo pdo_mysql tokenizer xml pcntl

#RUN pecl channel-update pecl.php.net && pecl install memcached mcrypt-1.0.1 mongodb && docker-php-ext-enable memcached mongodb
RUN pecl channel-update pecl.php.net && pecl install memcached mcrypt-1.0.1 mongodb   && docker-php-ext-enable memcached mongodb

# Add a non-root user:
ARG PUID=1000
ENV PUID ${PUID}
ARG PGID=1000
ENV PGID ${PGID}

#RUN addgroup -g ${PGID} laradock && \
#    adduser -D -G laradock -u ${PUID} laradock

#默认就有这个用户和组了 所以不能再添加 
#RUN    adduser -D -G www-data  -u ${PUID} www-data
#Install BZ2:
ARG INSTALL_BZ2=false
RUN if [ ${INSTALL_BZ2} = true ]; then \
  apk --update add bzip2-dev; \
  docker-php-ext-install bz2; \
fi

#不知为什么这些不生效呢 
#Install GD package:
#ARG INSTALL_GD=false
#ARG INSTALL_GD='true'
#RUN if [ ${INSTALL_GD} = true ]; then \
#   apk add --update --no-cache libpng-dev; \
#   docker-php-ext-install gd \
#;fi

RUN apk add --update --no-cache libpng-dev; \
   docker-php-ext-install gd 

#Install GMP package:
ARG INSTALL_GMP=true
#ARG INSTALL_GMP=false
#RUN if [ ${INSTALL_GMP} = true ]; then \
#   apk add --update --no-cache gmp gmp-dev \
#   && docker-php-ext-install gmp \
#;fi

RUN   apk add --update --no-cache gmp gmp-dev 
RUN     docker-php-ext-install gmp 

#Install SOAP package:
ARG INSTALL_SOAP=false
RUN if [ ${INSTALL_SOAP} = true ]; then \
    docker-php-ext-install soap \
;fi

#Install BCMath package:
ARG INSTALL_BCMATH=false
RUN if [ ${INSTALL_BCMATH} = true ]; then \
    docker-php-ext-install bcmath \
;fi

RUN     docker-php-ext-install bcmath 
# Install PostgreSQL drivers:
#ARG INSTALL_PGSQL=false
#RUN if [ ${INSTALL_PGSQL} = true ]; then \
#    apk --update add postgresql-dev \
#        && docker-php-ext-install pdo_pgsql \
#;fi
#
# Install ZipArchive:
ARG INSTALL_ZIP_ARCHIVE=false
RUN set -eux; \
  if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then \
    apk --update add libzip-dev && \
    if [ ${LARADOCK_PHP_VERSION} = "7.3" ] || [ ${LARADOCK_PHP_VERSION} = "7.4" ]; then \
      docker-php-ext-configure zip; \
    else \
      docker-php-ext-configure zip --with-libzip; \
    fi && \
    # Install the zip extension
    docker-php-ext-install zip \
;fi

# Install MySQL Client:
ARG INSTALL_MYSQL_CLIENT=false
RUN if [ ${INSTALL_MYSQL_CLIENT} = true ]; then \
      apk --update add mysql-client \
;fi

# Install FFMPEG:
ARG INSTALL_FFMPEG=false
RUN if [ ${INSTALL_FFMPEG} = true ]; then \
    apk --update add ffmpeg \
;fi

# Install AMQP:
#ARG INSTALL_AMQP=false
#
#RUN if [ ${INSTALL_AMQP} = true ]; then \
#RUN     apk --update add rabbitmq-c rabbitmq-c-dev && \
RUN     apk add rabbitmq-c rabbitmq-c-dev 
RUN    pecl install amqp 
RUN    docker-php-ext-enable amqp 
RUN    docker-php-ext-install sockets 
#;fi
#
# Install Gearman:
#ARG INSTALL_GEARMAN=false
#
#RUN if [ ${INSTALL_GEARMAN} = true ]; then \
#    sed -i "\$ahttp://dl-cdn.alpinelinux.org/alpine/edge/main" /etc/apk/repositories && \
#    sed -i "\$ahttp://dl-cdn.alpinelinux.org/alpine/edge/community" /etc/apk/repositories && \
#    sed -i "\$ahttp://dl-cdn.alpinelinux.org/alpine/edge/testing" /etc/apk/repositories && \
#    apk --update add php7-gearman && \
#    sh -c 'echo "extension=/usr/lib/php7/modules/gearman.so" > /usr/local/etc/php/conf.d/gearman.ini' \
#;fi
#
## Install Cassandra drivers:
##evan mark
#ARG INSTALL_CASSANDRA=false
#RUN if [ ${INSTALL_CASSANDRA} = true ]; then \
#  apk --update add cassandra-cpp-driver \
#  ;fi
#
#WORKDIR /usr/src
#RUN if [ ${INSTALL_CASSANDRA} = true ]; then \
#  git clone https://github.com/datastax/php-driver.git \
#  && cd php-driver/ext \
#  && phpize \
#  && mkdir -p /usr/src/php-driver/build \
#  && cd /usr/src/php-driver/build \
#  && ../ext/configure --with-php-config=/usr/bin/php-config7.1 > /dev/null \
#  && make clean >/dev/null \
#  && make >/dev/null 2>&1 \
#  && make install \
#  && docker-php-ext-enable cassandra \
#;fi
##
##evan mark
# Install Phalcon ext
#ARG INSTALL_PHALCON=false
#ARG PHALCON_VERSION
#ENV PHALCON_VERSION ${PHALCON_VERSION}
#
#RUN if [ $INSTALL_PHALCON = true ]; then \
#    apk --update add unzip gcc make re2c bash\
#    && curl -L -o /tmp/cphalcon.zip https://github.com/phalcon/cphalcon/archive/v${PHALCON_VERSION}.zip \
#    && unzip -d /tmp/ /tmp/cphalcon.zip \
#    && cd /tmp/cphalcon-${PHALCON_VERSION}/build \
#    && ./install \
#    && rm -rf /tmp/cphalcon* \
#;fi
#
#ARG INSTALL_GHOSTSCRIPT=false
#RUN if [ $INSTALL_GHOSTSCRIPT = true ]; then \
#    apk --update add ghostscript \
#;fi
#
# Install Redis package:
ARG INSTALL_REDIS=1
#ARG INSTALL_REDIS=false
RUN if [ ${INSTALL_REDIS} = 1 ]; then \
    # Install Redis Extension
    printf "\n" | pecl install -o -f redis \
    &&  rm -rf /tmp/pear \
    &&  docker-php-ext-enable redis \
;fi

RUN    printf "\n" | pecl install -o -f redis 
RUN     rm -rf /tmp/pear 
RUN      docker-php-ext-enable redis 
###########################################################################
# Swoole EXTENSION
###########################################################################
# evan
#ARG INSTALL_SWOOLE=false
ARG INSTALL_SWOOLE=true

#RUN if [ ${INSTALL_SWOOLE} = true ]; then \
#    # Install Php Swoole Extension
#    if [ $(php -r "echo PHP_MAJOR_VERSION;") = "5" ]; then \
#      pecl -q install swoole-2.0.10; \
#    else \
#      if [ $(php -r "echo PHP_MINOR_VERSION;") = "0" ]; then \
#        pecl install swoole-2.2.0; \
#      else \
#        pecl install swoole; \
#      fi \
#    fi \
#    && docker-php-ext-enable swoole \
#;fi


RUN         pecl install swoole     && docker-php-ext-enable swoole 

#evan 
#RUN  pecl install  opcache   && docker-php-ext-enable opcache  
RUN  docker-php-ext-enable opcache  

#exif
#RUN  docker-php-ext-enable exif 

###########################################################################
# Taint EXTENSION
###########################################################################

ARG INSTALL_TAINT=false

RUN if [ ${INSTALL_TAINT} = true ]; then \
    # Install Php TAINT Extension
    if [ $(php -r "echo PHP_MAJOR_VERSION;") = "7" ]; then \
      pecl install taint; \
    fi && \
    docker-php-ext-enable taint \
;fi

#
#--------------------------------------------------------------------------
# Optional Supervisord Configuration
#--------------------------------------------------------------------------
#
# Modify the ./supervisor.conf file to match your App's requirements.
# Make sure you rebuild your container with every change.
#

COPY supervisord.conf /etc/supervisord.conf

ENTRYPOINT ["/usr/bin/supervisord", "-n", "-c",  "/etc/supervisord.conf"]

RUN  usermod -a -G  www-data  www-data
#RUN  usermod  www-data

#
#--------------------------------------------------------------------------
# Optional Software's Installation
#--------------------------------------------------------------------------
#
# If you need to modify this image, feel free to do it right here.
#
    # -- Your awesome modifications go here -- #

#
#--------------------------------------------------------------------------
# Check PHP version
#--------------------------------------------------------------------------
#

RUN php -v | head -n 1 | grep -q "PHP ${PHP_VERSION}."

#
#--------------------------------------------------------------------------
# Final Touch
#--------------------------------------------------------------------------
#

# Clean up
RUN rm /var/cache/apk/* \
    && mkdir -p /var/www

WORKDIR /etc/supervisor/conf.d/


#evan  cron autostart
#CMD  /usr/sbin/crond
#ADD ./startup.sh /opt/startup.sh
#RUN sed -i 's/\r//g' /opt/startup.sh
#CMD ["/bin/ash", "/opt/startup.sh"]
